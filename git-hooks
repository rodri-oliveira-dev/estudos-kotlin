import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Assertions.assertEquals
import java.time.Instant

class ProcessarSolicitacaoCreditoFaturaUseCaseImplTest {

    private lateinit var dateTimeProvider: DateTimeProvider
    private lateinit var censurarUseCase: CensurarUseCase
    private lateinit var creditoFaturaRepository: CreditoFaturaRepository
    private lateinit var controleSolicitacaoRepository: ControleSolicitacaoRepository
    private lateinit var resgateService: ResgateService
    private lateinit var controleViewMapper: ControleViewMapper

    private lateinit var processarSolicitacaoCreditoFaturaUseCaseImpl: ProcessarSolicitacaoCreditoFaturaUseCaseImpl

    @BeforeEach
    fun setup() {
        dateTimeProvider = mockk()
        censurarUseCase = mockk(relaxed = true)
        creditoFaturaRepository = mockk(relaxed = true)
        controleSolicitacaoRepository = mockk(relaxed = true)
        resgateService = mockk(relaxed = true)
        controleViewMapper = mockk(relaxed = true)

        processarSolicitacaoCreditoFaturaUseCaseImpl = ProcessarSolicitacaoCreditoFaturaUseCaseImpl(
            dateTimeProvider,
            censurarUseCase,
            creditoFaturaRepository,
            controleSolicitacaoRepository,
            resgateService,
            controleViewMapper
        )
    }

    @Test
    fun `execute deve processar a solicitacao de credito em fatura com sucesso`() {
        // Arrange
        val participante = mockk<Participante>(relaxed = true)
        val observabilidade = mockk<Observabilidade>(relaxed = true)
        val autorizacao = mockk<Resgate>(relaxed = true)
        val confirmacao = mockk<Resgate>(relaxed = true)
        val controleView = mockk<ControleView>(relaxed = true)
        val controleInstance = mockk<ControleSolicitacao>(relaxed = true)

        every { controleSolicitacaoRepository.obter(any()) } returns sequenceOf(controleInstance)
        every { controleViewMapper.from(any()) } returns controleView
        every { dateTimeProvider.instante() } returns Instant.now()
        every { resgateService.autorizar(any(), any()) } returns autorizacao
        every { resgateService.confirmar(any(), any(), any()) } returns confirmacao

        // Act
        val result = processarSolicitacaoCreditoFaturaUseCaseImpl.execute(participante, observabilidade)

        // Assert
        verify { resgateService.autorizar(participante, observabilidade) }
        verify { resgateService.confirmar(participante, autorizacao, observabilidade) }
        verify { creditoFaturaRepository.inserir(any()) }
        verify { controleSolicitacaoRepository.atualizar(any(), any()) }
        assertEquals(participante.transferencia.situacaoTransferencia, SituacaoTransferencia.PROCESSADO_OK)
    }
}
