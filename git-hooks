@Test
fun `execute deve lançar TechnicalException quando controleSolicitacaoRepository obter retorna lista vazia`() {
    // Arrange
    val participante = mockk<Participante>(relaxed = true)
    val observabilidade = mockk<Observabilidade>(relaxed = true)
    val controleView = mockk<ControleView>(relaxed = true)

    every { controleSolicitacaoRepository.obter(any()) } returns emptySequence()
    every { controleViewMapper.from(any()) } returns controleView

    // Act & Assert
    assertThrows<TechnicalException> {
        processarSolicitacaoCreditoFaturaUseCaseImpl.execute(participante, observabilidade)
    }
}

@Test
fun `execute deve lançar BusinessException quando resgateService autorizar lança BusinessException`() {
    // Arrange
    val participante = mockk<Participante>(relaxed = true)
    val observabilidade = mockk<Observabilidade>(relaxed = true)
    val controleView = mockk<ControleView>(relaxed = true)
    val controleInstance = mockk<ControleSolicitacao>(relaxed = true)
    val businessException = BusinessException("Falha ao autorizar.", AUTORIZACAO_NAO_PROCESSADA)

    every { controleSolicitacaoRepository.obter(any()) } returns sequenceOf(controleInstance)
    every { controleViewMapper.from(any()) } returns controleView
    every { resgateService.autorizar(any(), any()) } throws businessException

    // Act & Assert
    assertThrows<BusinessException> {
        processarSolicitacaoCreditoFaturaUseCaseImpl.execute(participante, observabilidade)
    }
}

@Test
fun `execute deve lançar BusinessException quando resgateService confirmar lança BusinessException`() {
    // Arrange
    val participante = mockk<Participante>(relaxed = true)
    val observabilidade = mockk<Observabilidade>(relaxed = true)
    val autorizacao = mockk<Resgate>(relaxed = true)
    val controleView = mockk<ControleView>(relaxed = true)
    val controleInstance = mockk<ControleSolicitacao>(relaxed = true)
    val businessException = BusinessException("Falha ao confirmar.", CONFIRMACAO_NAO_PROCESSADA)

    every { controleSolicitacaoRepository.obter(any()) } returns sequenceOf(controleInstance)
    every { controleViewMapper.from(any()) } returns controleView
    every { dateTimeProvider.instante() } returns Instant.now()
    every { resgateService.autorizar(any(), any()) } returns autorizacao
    every { resgateService.confirmar(any(), any(), any()) } throws businessException

    // Act & Assert
    assertThrows<BusinessException> {
        processarSolicitacaoCreditoFaturaUseCaseImpl.execute(participante, observabilidade)
    }
}
