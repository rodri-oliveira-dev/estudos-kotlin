import io.micronaut.context.annotation.Bean
import io.micronaut.context.annotation.Factory
import io.micronaut.http.client.HttpClientConfiguration
import io.micronaut.http.client.netty.DefaultHttpClient
import io.micronaut.runtime.ApplicationConfiguration
import io.netty.handler.ssl.SslContextBuilder
import io.netty.handler.ssl.util.InsecureTrustManagerFactory
import javax.inject.Singleton
import javax.net.ssl.SSLException

@Factory
class InsecureHttpClientFactory {

    @Bean
    @Singleton
    fun insecureHttpClient(
        applicationConfiguration: ApplicationConfiguration,
        httpClientConfiguration: HttpClientConfiguration
    ): DefaultHttpClient {
        val sslContext = try {
            SslContextBuilder.forClient()
                .trustManager(InsecureTrustManagerFactory.INSTANCE)
                .build()
        } catch (e: SSLException) {
            throw RuntimeException("Failed to create SSL context for insecure HttpClient", e)
        }

        return DefaultHttpClient(
            httpClientConfiguration,
            applicationConfiguration,
            null,
            null,
            null,
            sslContext
        )
    }
}




import io.micronaut.context.annotation.Requires
import io.micronaut.http.client.DefaultHttpClientConfiguration
import io.micronaut.http.client.HttpClientConfiguration

@Requires(property = "my.client.insecure", value = "true")
class InsecureClientConfiguration : DefaultHttpClientConfiguration() {
    init {
        // Configurações adicionais, se necessário, como tempo limite de leitura, etc.
        // Por exemplo:
        // readTimeout = Duration.ofSeconds(5)
    }
}






my:
  client:
    insecure: true




@Client(id = "insecureClient", value = "https://api.example.com")
interface ExternalServiceClient {
    // ...
}
